{"version":3,"sources":["webpack:///./src/pages/tags.js"],"names":["PageContainer","styled","div","withConfig","displayName","componentId","Tag","li","ForwardSlash","span","TagsPage","_ref","_ref$data","data","group","allMarkdownRemark","title","site","siteMetadata","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","_components_layout__WEBPACK_IMPORTED_MODULE_7__","react_helmet__WEBPACK_IMPORTED_MODULE_5___default","sort","b","totalCount","map","tag","key","fieldValue","gatsby__WEBPACK_IMPORTED_MODULE_6__","to","kebabCase","pageQuery"],"mappings":"wOAaMA,EAAgBC,IAAOC,IAAVC,WAAA,CAAAC,YAAA,sBAAAC,YAAA,YAAGJ,CAAH,2BAIbK,EAAML,IAAOM,GAAVJ,WAAA,CAAAC,YAAA,YAAAC,YAAA,YAAGJ,CAAH,4DAMHO,EAAeP,IAAOQ,KAAVN,WAAA,CAAAC,YAAA,qBAAAC,YAAA,YAAGJ,CAAH,oBAmDHS,UA/CE,SAAAC,GAAA,IAAAC,EAAAD,EACfE,KACuBC,EAFRF,EAEbG,kBAAqBD,MAEHE,EAJLJ,EAGbK,KACEC,aAAgBF,MAJL,OAQfG,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACrB,EAAD,KACEmB,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAQJ,MAAOA,IACfG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,UACGP,EAAMU,KAAK,SAACJ,EAAGK,GAAJ,OAAUA,EAAEC,WAAaN,EAAEM,aAAYC,IAAI,SAAAC,GAAG,OACxDT,EAAAC,EAAAC,cAACf,EAAD,CAAKuB,IAAKD,EAAIE,YACZX,EAAAC,EAAAC,cAACU,EAAA,KAAD,CAAMC,GAAE,SAAWC,IAAUL,EAAIE,YAAzB,KACLF,EAAIF,WAAa,GAAjB,IAA0BE,EAAIF,WAAeE,EAAIF,WAClDP,EAAAC,EAAAC,cAACb,EAAD,UACCoB,EAAIE,oBA8Bd,IAAMI,EAAS","file":"component---src-pages-tags-js-d94a7fdd202593285791.js","sourcesContent":["import React from 'react'\n// import PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\n// Utilities\nimport kebabCase from 'lodash/kebabcase'\n\n// Components\nimport Helmet from 'react-helmet'\nimport { graphql, Link } from 'gatsby'\n\nimport Layout from '../components/layout'\n\nconst PageContainer = styled.div`\n  margin: 30px 0 60px 0;\n`\n\nconst Tag = styled.li`\n  list-style-type: none;\n  margin-left: 0;\n  margin-bottom: 30px;\n`\n\nconst ForwardSlash = styled.span`\n  margin: 0 10px;\n`\n\nconst TagsPage = ({\n  data: {\n    allMarkdownRemark: { group },\n    site: {\n      siteMetadata: { title },\n    },\n  },\n}) => (\n  <Layout>\n    <PageContainer>\n      <Helmet title={title} />\n      <div>\n        <h2>Tags</h2>\n        <ul>\n          {group.sort((a, b) => b.totalCount - a.totalCount).map(tag => (\n            <Tag key={tag.fieldValue}>\n              <Link to={`/tags/${kebabCase(tag.fieldValue)}/`}>\n                {tag.totalCount < 10 ? `0${tag.totalCount}` : tag.totalCount}\n                <ForwardSlash>/</ForwardSlash>\n                {tag.fieldValue}\n              </Link>\n            </Tag>\n          ))}\n        </ul>\n      </div>\n    </PageContainer>\n  </Layout>\n)\n\n// TagsPage.propTypes = {\n//   data: PropTypes.shape({\n//     allMarkdownRemark: PropTypes.shape({\n//       group: PropTypes.arrayOf(\n//         PropTypes.shape({\n//           fieldValue: PropTypes.string.isRequired,\n//           totalCount: PropTypes.number.isRequired,\n//         }).isRequired,\n//       ),\n//     }),\n//     site: PropTypes.shape({\n//       siteMetadata: PropTypes.shape({\n//         title: PropTypes.string.isRequired,\n//       }),\n//     }),\n//   }),\n// };\n\nexport default TagsPage\n\nexport const pageQuery = graphql`\n  query TagsQuery {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      filter: { frontmatter: { published: { ne: false } } }\n    ) {\n      group(field: frontmatter___tags) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`\n"],"sourceRoot":""}