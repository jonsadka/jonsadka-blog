webpackJsonp([0x81b8806e4260],{354:function(e,a){e.exports={data:{allMarkdownRemark:{edges:[{node:{excerpt:"The  Super Bowl Square  gambling game is all luck, right? Not according to our calculations. An analysis of all 2,312 NFL games since 2009 revealed guessing certain numbers each quarter can increase your chances of winning. Your best bets are 0,…",id:"/Users/jon/Code/jonsadka-blog/src/pages/choosing-the-best-numbers-in-nfl-football-squares-to-beat-your-friends/index.md absPath of file >>> MarkdownRemark",frontmatter:{title:"Choosing the best numbers in nfl football squares to beat your friends",date:"1454659200000",path:"/choosing-the-best-numbers-in-nfl-football-squares-to-beat-your-friends"}}},{node:{excerpt:"ECMAScript5 introduced  Date.now() , a method that returns the milliseconds elapsed since  1 January 1970 00:00:00 UTC  up until now as a  Number .  Date.now()  is the fastest way to record a timestamp in JavaScript [1] ,  [2]  and as such, usage…",id:"/Users/jon/Code/jonsadka-blog/src/pages/how-to-generate-time-series-week-over-week-year-over-year-aggregations-in-mongodb-using-unix-epoch-timestamps-tutorial-and-example/index.md absPath of file >>> MarkdownRemark",frontmatter:{title:"How to generate time series aggregations in MongoDB using Unix / Epoch timestamps (week over week, year over year, etc. tutorial and example)",date:"1444806000000",path:"/how-to-generate-time-series-week-over-week-year-over-year-aggregations-in-mongodb-using-unix-epoch-timestamps-tutorial-and-example"}}},{node:{excerpt:"Recently I have had to do a lot of work building infrastructure converting data from  .json  to  .csv . One challenge that presented itself was figuring out a way to prepend / write data to the beginning of the  .csv  file. There are plenty of use…",id:"/Users/jon/Code/jonsadka-blog/src/pages/how-to-write-data-to-the-beginning-of-a-file-with-node-javascript-tutorial-and-example/index.md absPath of file >>> MarkdownRemark",frontmatter:{title:"How to write data to the beginning of a file with Node.js / JavaScript (tutorial and example)",date:"1435647600000",path:"/how-to-write-data-to-the-beginning-of-a-file-with-node-javascript-tutorial-and-example"}}},{node:{excerpt:"Yelp. The word is synonymous with ratings. Although Yelp is very powerful and has millions of reviews, they have not gained my trust. There are tales of paid Yelp reviews, compromised Yelp reviews, even extortion. To use Yelp, I need to stop…",id:"/Users/jon/Code/jonsadka-blog/src/pages/how-apple-can-catch-up-to-google-ratings-and-yelp-reviews-overnight/index.md absPath of file >>> MarkdownRemark",frontmatter:{title:"How Apple can catch up to Google ratings and Yelp reviews overnight",date:"1421740800000",path:"/how-apple-can-catch-up-to-google-ratings-and-yelp-reviews-overnight"}}},{node:{excerpt:"About two months ago, Nicolas and I were curious to see if we could nail down the cheapest and priciest hours to order an Uber. To do this, we requested pricing data from Uber’s developer API at ten minute intervals in three major cities (San…",id:"/Users/jon/Code/jonsadka-blog/src/pages/best-and-worst-times-to-take-an-uber/index.md absPath of file >>> MarkdownRemark",frontmatter:{title:"Best and worst times to take an Uber in San Francisco, Los Angeles, and New York",date:"1417507200000",path:"/best-and-worst-times-to-take-an-uber"}}},{node:{excerpt:"Following up with my last blog post about adaptive line chart graphs ( link ), I decided to apply this same concept of adaptive charts to a pie / donut chart. The goal is to create a chart similar to the one below, which updates to any new data…",id:"/Users/jon/Code/jonsadka-blog/src/pages/how-to-create-adaptive-pie-charts-with-transitions-in-d3/index.md absPath of file >>> MarkdownRemark",frontmatter:{title:"How to create adaptive pie donut charts with transitions in D3.js (interactive tutorial and example)",date:"1414134000000",path:"/how-to-create-adaptive-pie-charts-with-transitions-in-d3"}}},{node:{excerpt:"One of the bigger challenges in visualizing data is making your charts responsive so that they can resize no matter what range of data is thrown at it. Things get even more complicated when the dataset is actually a collection of many individual sets…",id:"/Users/jon/Code/jonsadka-blog/src/pages/how-to-create-live-updating-and-flexible-d3-line-charts-using-pseudo-data/index.md absPath of file >>> MarkdownRemark",frontmatter:{title:"How to create live updating and flexible D3.js line charts using pseudo-data (interactive tutorial and example)",date:"1413270000000",path:"/how-to-create-live-updating-and-flexible-d3-line-charts-using-pseudo-data"}}},{node:{excerpt:"3/19/2015 Update:  I went ahead and created a little application to help make things easier which can be found here  https://github.com/jonsadka/jsonReducer There are many API’s available for use, many of which are free and provide lots of fun data…",id:"/Users/jon/Code/jonsadka-blog/src/pages/how-to-modify-filter-and-save-json-files-locally-using-jquery/index.md absPath of file >>> MarkdownRemark",frontmatter:{title:"How to modify, filter, and save JSON files locally using jQuery",date:"1412665200000",path:"/how-to-modify-filter-and-save-json-files-locally-using-jquery"}}},{node:{excerpt:'Often times in JavaScript and D3.js, we want to quickly create randomly-generated, "fake" data on the fly for testing and iterative development.  To help speed things up, we can combine the  d3.range()  operator and the native  Array.map()  prototype…',id:"/Users/jon/Code/jonsadka-blog/src/pages/how-to-quickly-create-randomly-generated-datasets-in-javascript-with-d3/index.md absPath of file >>> MarkdownRemark",frontmatter:{title:"How to quickly create randomly generated datasets in JavaScript with D3.js",date:"1411974000000",path:"/how-to-quickly-create-randomly-generated-datasets-in-javascript-with-d3"}}},{node:{excerpt:"I love functional programming and things just got better because of reduce and reduceRight. In ECMAScript5.1, the Ecma integrated some really common array mutation operations from some popular libraries (underscore, lodash, etc.) and made them…",id:"/Users/jon/Code/jonsadka-blog/src/pages/09-19-2014-using-reduce-to-create-arrays-and-objects-in-javascript/index.md absPath of file >>> MarkdownRemark",frontmatter:{title:"Using .reduce() to create arrays and objects in JavaScript",date:"1411110000000",path:"/using-reduce-to-create-arrays-and-objects-in-javascript"}}},{node:{excerpt:"Uber opened up their API to developer and as a fun experiment, I decided to play around with the Uber API, collect a few days worth of data and see if any trends were apparent ( http://jonsadka.github.io/uberAnalytics/ ). To make a successful pricing…",id:"/Users/jon/Code/jonsadka-blog/src/pages/how-to-use-the-uber-api-to-get-pricing-data/index.md absPath of file >>> MarkdownRemark",frontmatter:{title:"How to use the Uber API to get pricing data",date:"1409295600000",path:"/how-to-use-the-uber-api-to-get-pricing-data"}}},{node:{excerpt:"The term closure is often thrown around a lot in the JavaScript community however there seems to be a misunderstanding of what this term really means.  A closure in JavaScript does not refer to a specific function, but rather the way in which that…",id:"/Users/jon/Code/jonsadka-blog/src/pages/fight-on-the-power-of-javascript-closures/index.md absPath of file >>> MarkdownRemark",frontmatter:{title:"Fight on! The power of JavaScript closures",date:"1408172400000",path:"/fight-on-the-power-of-javascript-closures"}}},{node:{excerpt:"In JavaScript, there are four ways to instantiate a new object. This blog post will cover the differences between the prototypal and pseudoclassical instantiation patterns; functional decorator and functional-shared instantiation patterns will not be…",id:"/Users/jon/Code/jonsadka-blog/src/pages/prototypal-and-pseudoclassical-instantiation-in-javascript/index.md absPath of file >>> MarkdownRemark",frontmatter:{title:"Prototypal and pseudoclassical instantiation in JavaScript",date:"1407654000000",path:"/prototypal-and-pseudoclassical-instantiation-in-javascript"}}},{node:{excerpt:"D3.js is an amazing platform that allows software engineers to bind data to each DOM element that exists, or will be, created.  This data can then be used to compile graphs, charts, or any other visual means. Last week, I had the opportunity to play…",id:"/Users/jon/Code/jonsadka-blog/src/pages/type-coercion-in-d3js/index.md absPath of file >>> MarkdownRemark",frontmatter:{title:"Type coercion in D3.js",date:"1407135600000",path:"/type-coercion-in-d3js"}}},{node:{excerpt:'Over the past few days, I have discovered the large potential of falsey values ( false ,  0 ,  "" ,  null ,  undefined ,  NaN ) to provide direction and simplify code in javascript.  If used correctly, one can replace multi-line logical expressions…',id:"/Users/jon/Code/jonsadka-blog/src/pages/supercharge-your-falsey-conditional-statements-in-javascript/index.md absPath of file >>> MarkdownRemark",frontmatter:{title:"Supercharge your falsey && conditional statements in JavaScript",date:"1406703600000",path:"/supercharge-your-falsey-conditional-statements-in-javascript"}}}]}},pathContext:{}}}});
//# sourceMappingURL=path---index-4f28b79251189abfaeb6.js.map