{"version":3,"sources":["webpack:///./src/templates/tags.js"],"names":["PageContainer","styled","div","Tag","li","Tags","pageContext","data","tag","allMarkdownRemark","edges","totalCount","tagHeader","map","node","frontmatter","path","title","key","to","pageQuery"],"mappings":"2FAAA,8GAQMA,EAAgBC,IAAOC,IAAV,0EAAGD,CAAH,2BAIbE,EAAMF,IAAOG,GAAV,gEAAGH,CAAH,8CAyDMI,UApDF,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,YAAaC,EAAU,EAAVA,KACnBC,EAAOF,EAAPE,IAD6B,EAERD,EAAKE,kBAA1BC,EAF6B,EAE7BA,MAAOC,EAFsB,EAEtBA,WACRC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAIf,OACE,kBAAC,IAAD,KACE,kBAACR,EAAD,KACE,4BAAKY,GACL,4BACGF,EAAMG,KAAI,YAAa,IAAD,IAAVC,KACgBC,YAApBC,EADc,EACdA,KAAMC,EADQ,EACRA,MACb,OACE,kBAACd,EAAD,CAAKe,IAAKF,GACR,kBAAC,OAAD,CAAMG,GAAIH,GAAOC,QASzB,kBAAC,OAAD,CAAME,GAAG,SAAT,mBA6BD,IAAMC,EAAS","file":"component---src-templates-tags-js-589c103f7c86148a830c.js","sourcesContent":["import React from 'react'\n// import PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport {graphql, Link} from 'gatsby'\n\n// Components\nimport Layout from '../components/layout'\n\nconst PageContainer = styled.div`\n  margin: 30px 0 60px 0;\n`\n\nconst Tag = styled.li`\n  margin-bottom: 15px;\n  list-style-type: none;\n`\n\nconst Tags = ({pageContext, data}) => {\n  const {tag} = pageContext\n  const {edges, totalCount} = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? '' : 's'\n  } tagged with \"${tag}\"`\n\n  return (\n    <Layout>\n      <PageContainer>\n        <h2>{tagHeader}</h2>\n        <ul>\n          {edges.map(({node}) => {\n            const {path, title} = node.frontmatter\n            return (\n              <Tag key={path}>\n                <Link to={path}>{title}</Link>\n              </Tag>\n            )\n          })}\n        </ul>\n        {/*\n          This links to a page that does not yet exist.\n          We'll come back to it!\n        */}\n        <Link to=\"/tags\">See all tags</Link>\n      </PageContainer>\n    </Layout>\n  )\n}\n\n// Tags.propTypes = {\n//   pageContext: PropTypes.shape({\n//     tag: PropTypes.string.isRequired,\n//   }),\n//   data: PropTypes.shape({\n//     allMarkdownRemark: PropTypes.shape({\n//       totalCount: PropTypes.number.isRequired,\n//       edges: PropTypes.arrayOf(\n//         PropTypes.shape({\n//           node: PropTypes.shape({\n//             frontmatter: PropTypes.shape({\n//               path: PropTypes.string.isRequired,\n//               title: PropTypes.string.isRequired,\n//             }),\n//           }),\n//         }).isRequired,\n//       ),\n//     }),\n//   }),\n// };\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query TagPage($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: {fields: [frontmatter___date], order: DESC}\n      filter: {frontmatter: {tags: {in: [$tag]}}}\n    ) {\n      totalCount\n      edges {\n        node {\n          frontmatter {\n            title\n            path\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}