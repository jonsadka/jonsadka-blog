{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/how-to-debug-a-chrome-specific-bug-on-ios-using-remote-debugging","result":{"data":{"markdownRemark":{"id":"12ec8ca6-d2c0-5153-8b29-8c61c591e72b","html":"<p>I recently had the opportunity to implement some new visualizations for Uber City Guides. Before launch, we discovered a strange bug that only occurred on Chrome for iOS. Even though there are some helpful guides online on how to debug Chrome specific bugs on iOS (like <a href=\"https://stackoverflow.com/questions/38179396/is-there-any-way-to-debug-chrome-in-any-ios-device\">this</a>) I couldn't find a comprehensive guide from start to finish, so I decided to create one.</p>\n<h3>Installation and Setup</h3>\n<ol>\n<li>\n<p>Install RemoteDebug iOS WebKit Adapter on your OSX computer (Mac)</p>\n<ul>\n<li>\n<p>This requires you to first install two dependencies using <code>brew</code> (<a href=\"https://github.com/libimobiledevice/libimobiledevice\">libimobiledevice</a> and <a href=\"https://github.com/google/ios-webkit-debug-proxy\">iOS WebKit Debug Proxy</a>)</p>\n<pre><code>$ brew update\n$ brew unlink libimobiledevice ios-webkit-debug-proxy usbmuxd\n$ brew uninstall --force libimobiledevice ios-webkit-debug-proxy usbmuxd\n$ brew install --HEAD usbmuxd\n$ brew install --HEAD libimobiledevice\n$ brew install --HEAD ios-webkit-debug-proxy\n</code></pre>\n</li>\n<li>\n<p>Then install <a href=\"https://github.com/RemoteDebug/remotedebug-ios-webkit-adapter\">RemoteDebug iOS WebKit Adapter</a> globally:</p>\n<pre><code>$ npm install remotedebug-ios-webkit-adapter -g\n</code></pre>\n<p>or if you are experiencing <a href=\"https://github.com/RemoteDebug/remotedebug-ios-webkit-adapter/issues/180\">issues</a></p>\n<pre><code>$ npm install remotedebug-ios-webkit-adapter@next -g\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>Enable the Web Inspector on your iOS device (iPhone or iPad)</p>\n<ul>\n<li>Choose Settings > Safari > Advanced</li>\n<li>Toggle \"Web Inspector\" on</li>\n</ul>\n</li>\n<li>\n<p>Enable the Develop Menu in Safari on your OSX computer (<a href=\"https://developer.apple.com/library/content/documentation/NetworkingInternetWeb/Conceptual/Web_Inspector_Tutorial/EnableWebInspector/EnableWebInspector.html\">official link</a>)</p>\n<ul>\n<li>Choose Safari > Preferences, and click Advanced</li>\n<li>At the bottom of the pane, select the \"Show Develop menu in menu bar\" checkbox.</li>\n</ul>\n<p><img src=\"/img/blog-posts/2018-16-05-how-to-debug/1.png\" alt=\"Safari Preferences Menu\" title=\"Safari Preferences Menu\">\n<img src=\"/img/blog-posts/2018-16-05-how-to-debug/2.png\" alt=\"Safari Advanced Settings\" title=\"Safari Advanced Settings\"></p>\n</li>\n<li>\n<p>Allow your OSX computer to access your iOS device</p>\n<ul>\n<li>Connect your iOS device to your OSX computer using your USB cable</li>\n<li>Open Safari on OSX</li>\n<li>Develop > Hover over your iOS device</li>\n<li>Click \"Use for Development...\"</li>\n<li>On your iOS device, click \"Trust\" when you see the \"Trust this Computer?\" prompt</li>\n</ul>\n<p><img src=\"/img/blog-posts/2018-16-05-how-to-debug/3.png\" alt=\"Safari Trust Computer\" title=\"Safari Trust Computer\"></p>\n</li>\n<li>\n<p>Setup device discovery in Chrome on OSX</p>\n<ul>\n<li>Open Chrome on your OSX computer and navigate to <code>chrome://inspect/#devices</code></li>\n<li>Select the \"Discover network targets\" checkbox and click the \"Configure\" button</li>\n<li>Add \"localhost:9000\" to the list of hosts</li>\n<li>Click \"Done\"</li>\n</ul>\n<p><img src=\"/img/blog-posts/2018-16-05-how-to-debug/4.png\" alt=\"Chrome Inspect Devices\" title=\"Chrome Inspect Devices\">\n<img src=\"/img/blog-posts/2018-16-05-how-to-debug/5.png\" alt=\"Chrome Inspect Devices\" title=\"Chrome Inspect Devices\"></p>\n</li>\n</ol>\n<h3>Debugging</h3>\n<ol>\n<li>\n<p>[Optional if developing locally] Identify local server address</p>\n<ul>\n<li>Run your server locally on your OSX computer</li>\n<li>Identify the port your webpage is being served from (typically <code>http://localhost:&#x3C;port></code>)</li>\n<li>Open System Preferences on OSX</li>\n<li>Click \"Sharing\" and identify the computer name (typically <code>&#x3C;computername>.local</code>)</li>\n</ul>\n<p><img src=\"/img/blog-posts/2018-16-05-how-to-debug/6.png\" alt=\"OSX System Preferences\" title=\"OSX System Preferences\">\n<img src=\"/img/blog-posts/2018-16-05-how-to-debug/7.png\" alt=\"OSX Sharing Settings\" title=\"OSX Sharing Settings\"></p>\n</li>\n<li>\n<p>Load the webpage on your iOS device</p>\n<ul>\n<li>Make sure your iOS device is connected to your OSX computer using your USB cable</li>\n<li>On your iOS device, open Safari and navigate to the page you are trying to debug (i.e. <code>&#x3C;websitename>.com</code> or, for local development, <code>http://&#x3C;computername>.local:&#x3C;port></code>)</li>\n<li><strong>NOTE:</strong> Even though we are loading up in Safari on our iOS device, remote debugging using Chrome on our OSX computer will use Chrome's context and user agent instead of Safari's)</li>\n</ul>\n</li>\n<li>\n<p>Run the remote debugger on your OSX computer</p>\n<pre><code>$ remotedebug_ios_webkit_adapter --port=9000\n</code></pre>\n</li>\n<li>\n<p>Debug using Chrome</p>\n<ul>\n<li>Open Chrome on your OSX computer and navigate to <code>chrome://inspect/#devices</code></li>\n<li>Identify the webpage you wish to debug on the iOS device and click \"Inspect\"</li>\n<li>A Chrome debugger will appear which uses Chrome's context and user agent string instead of Safari's</li>\n</ul>\n<p><img src=\"/img/blog-posts/2018-16-05-how-to-debug/8.png\" alt=\"Chrome Remote Target List\" title=\"Chrome Remote Target List\">\n<img src=\"/img/blog-posts/2018-16-05-how-to-debug/9.png\" alt=\"Remote Chrome debugger\" title=\"Remote Chrome debugger\"></p>\n</li>\n</ol>","frontmatter":{"date":"1526454000000","path":"/blog/how-to-debug-a-chrome-specific-bug-on-ios-using-remote-debugging","title":"How to debug an issue in Chrome for iOS using remote debugging"}}},"pageContext":{}}}